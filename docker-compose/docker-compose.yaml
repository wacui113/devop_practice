version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: coffeeshop-postgres-dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-coffeeshop_dev}
      POSTGRES_USER: ${POSTGRES_USER:-devuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devpassword} 
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    ports:
      - "5432:5432" 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    container_name: coffeeshop-rabbitmq-dev
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-devrabbit}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-devrabbitpass} 
    ports:
      - "5672:5672"  
      - "15672:15672" 
    volumes:
      - rabbitmq_data_dev:/var/lib/rabbitmq/
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  product:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT_NAME}-go-coffeeshop-product:latest 
    container_name: coffeeshop-product-dev
    environment:
      APP_NAME: "product-dev"
    ports:
      - "5001:5001"
    depends_on:
      postgres: 
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"] 
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  counter:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT_NAME}-go-coffeeshop-counter:latest 
    container_name: coffeeshop-counter-dev
    environment:
      APP_NAME: "counter-dev"
      IN_DOCKER: "true"
      PG_URL: "postgres://${POSTGRES_USER:-devuser}:${POSTGRES_PASSWORD:-devpassword}@postgres:5432/${POSTGRES_DB:-coffeeshop_dev}?sslmode=disable"
      PG_DSN_URL: "host=postgres user=${POSTGRES_USER:-devuser} password=${POSTGRES_PASSWORD:-devpassword} dbname=${POSTGRES_DB:-coffeeshop_dev} sslmode=disable"
      RABBITMQ_URL: "amqp://${RABBITMQ_USER:-devrabbit}:${RABBITMQ_PASS:-devrabbitpass}@rabbitmq:5672/"
      PRODUCT_CLIENT_URL: "product:5001"
    ports:
      - "5002:5002"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      product:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"] 
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  barista:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT_NAME}-go-coffeeshop-barista:latest 
    container_name: coffeeshop-barista-dev
    environment:
      APP_NAME: "barista-dev"
      IN_DOCKER: "true"
      PG_URL: "postgres://${POSTGRES_USER:-devuser}:${POSTGRES_PASSWORD:-devpassword}@postgres:5432/${POSTGRES_DB:-coffeeshop_dev}?sslmode=disable"
      PG_DSN_URL: "host=postgres user=${POSTGRES_USER:-devuser} password=${POSTGRES_PASSWORD:-devpassword} dbname=${POSTGRES_DB:-coffeeshop_dev} sslmode=disable"
      RABBITMQ_URL: "amqp://${RABBITMQ_USER:-devrabbit}:${RABBITMQ_PASS:-devrabbitpass}@rabbitmq:5672/"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:INTERNAL_PORT/health"] 
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  kitchen:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT_NAME}-go-coffeeshop-kitchen:latest 
    container_name: coffeeshop-kitchen-dev
    environment:
      APP_NAME: "kitchen-dev"
      IN_DOCKER: "true"
      PG_URL: "postgres://${POSTGRES_USER:-devuser}:${POSTGRES_PASSWORD:-devpassword}@postgres:5432/${POSTGRES_DB:-coffeeshop_dev}?sslmode=disable"
      PG_DSN_URL: "host=postgres user=${POSTGRES_USER:-devuser} password=${POSTGRES_PASSWORD:-devpassword} dbname=${POSTGRES_DB:-coffeeshop_dev} sslmode=disable"
      RABBITMQ_URL: "amqp://${RABBITMQ_USER:-devrabbit}:${RABBITMQ_PASS:-devrabbitpass}@rabbitmq:5672/"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:INTERNAL_PORT/health"] 
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  proxy:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT_NAME}-go-coffeeshop-proxy:latest 
    container_name: coffeeshop-proxy-dev
    environment:
      APP_NAME: "proxy-dev"
      GRPC_PRODUCT_HOST: "product"
      GRPC_PRODUCT_PORT: "5001"
      GRPC_COUNTER_HOST: "counter"
      GRPC_COUNTER_PORT: "5002"
    ports:
      - "5000:5000"
    depends_on:
      product:
        condition: service_healthy
      counter:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"] 
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  web:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT_NAME}-go-coffeeshop-web:latest 
    container_name: coffeeshop-web-dev
    environment:
      REVERSE_PROXY_URL: "http://proxy:5000"
      WEB_PORT: "8888"
    ports:
      - "8888:8888" 
    depends_on:
      proxy:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/health"] 
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data_dev:
  rabbitmq_data_dev:


networks:
  default:
    driver: bridge
